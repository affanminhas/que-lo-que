import 'dart:convert';
import 'dart:math' as math;

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:timeago/timeago.dart' as timeago;
import 'lat_lng.dart';
import 'place.dart';
import 'uploaded_file.dart';
import '/backend/backend.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '/backend/schema/enums/enums.dart';
import '/auth/firebase_auth/auth_util.dart';

List<String> newCustomFunction(
  String? socialLink1,
  String? socialLink2,
) {
  return [socialLink1 ?? '', socialLink2 ?? ''];
}

int calculateAge(String birthdate) {
  // Parse the input date
  final DateTime birthDate = DateTime.parse(
    "${birthdate.split('/')[2]}-${birthdate.split('/')[1]}-${birthdate.split('/')[0]}",
  );

  // Get today's date
  final DateTime today = DateTime.now();

  // Calculate the age
  int age = today.year - birthDate.year;

  // Adjust for the case where the birthday hasn't occurred yet this year
  if (today.month < birthDate.month ||
      (today.month == birthDate.month && today.day < birthDate.day)) {
    age--;
  }

  return age;
}

String convertStringToImagePath(String imagePathStr) {
  return imagePathStr;
}

bool checkLocation(
  String location,
  String address,
  String searchLocation,
) {
  print(location);
  print(address);
  print(searchLocation);

  if (location.isEmpty && address.isEmpty) return true;

  // Convert both location and query to lowercase and split into words
  final List<String> locationWords =
      location.toLowerCase().split(RegExp(r'[,\s]+'));
  final List<String> addressWords =
      searchLocation.toLowerCase().split(RegExp(r'[,\s]+'));
  final List<String> queryWords =
      searchLocation.toLowerCase().split(RegExp(r'[,\s]+'));

  // Check if any word in the query matches a word in the location
  return queryWords.any((word) => locationWords.contains(word)) ||
      queryWords.any((word) => addressWords.contains(word));

  // if (searchLocation.toLowerCase().contains(location.toLowerCase())) {
  //   return true;
  // } else if (searchLocation.toLowerCase().contains(address.toLowerCase())) {
  //   return true;
  // } else {
  //   return false;
  // }
}

bool checkAgeLimit(
  int age,
  String minAge,
  String maxAge,
) {
  if (minAge.isEmpty || maxAge.isEmpty) {
    return false; // Return false if any input is null or empty
  }

  return int.parse(minAge) <= age && age <= int.parse(maxAge);
}

String convertStringToVideoPath(String videoPathStr) {
  return videoPathStr;
}

bool checkValidURL(String url) {
  return Uri.parse(url).isAbsolute;
}

List<UserActivityRecord> getFilteredActivity(
  List<UserActivityRecord>? searchActivity,
  List<UserActivityRecord> userActivities,
) {
  print('search activity: ${searchActivity}');
  print('user activity: ${userActivities}');

  if (searchActivity == null || searchActivity.isEmpty) {
    return userActivities;
  } else {
    return searchActivity;
  }
}

List<DocumentReference> getRefList(
  DocumentReference ref1,
  DocumentReference ref2,
) {
  return [ref1, ref2];
}

List<String> getHeights() {
  List<String> heightOptions = [
    for (double height = 3.0; height <= 7.0; height += 0.1)
      "${height.toStringAsFixed(1)} ft",
    "Other",
  ];
  return heightOptions;
}

List<String> getNationalities() {
  List<String> nationalityOptions = [
    "Afghan",
    "Albanian",
    "Algerian",
    "Andorran",
    "Angolan",
    "Antiguan",
    "Argentine",
    "Armenian",
    "Australian",
    "Austrian",
    "Azerbaijani",
    "Bahamian",
    "Bahraini",
    "Bangladeshi",
    "Barbadian",
    "Belizean",
    "Beninese",
    "Bhutanese",
    "Belarusian",
    "Bissau-Guinean",
    "Bulgarian",
    "Bolivian",
    "Bosnian",
    "Botswanan",
    "Brazilian",
    "Bruneian",
    "Burkinabe",
    "Burundian",
    "Cambodian",
    "Cameroonian",
    "Canadian",
    "Cape Verdean",
    "Central African",
    "Chilean",
    "Chinese",
    "Cypriot",
    "Colombian",
    "Comorian",
    "Congolese (Republic of the Congo)",
    "Congolese (Democratic Republic of the Congo)",
    "Costa Rican",
    "Croatian",
    "Cuban",
    "Danish",
    "Djiboutian",
    "Dominican",
    "Dominican (Saint Kitts and Nevis)",
    "Ecuadorian",
    "Egyptian",
    "Salvadoran",
    "Emirati (United Arab Emirates)",
    "Equatorial Guinean",
    "Eritrean",
    "Spanish",
    "Estonian",
    "Swazi",
    "Ethiopian",
    "Fijian",
    "Filipino",
    "Finnish",
    "French",
    "Gabonese",
    "Gambian",
    "Georgian",
    "Ghanaian",
    "Gibraltarian",
    "Grenadian",
    "Guatemalan",
    "Guinean",
    "Guinean (Guinea-Bissau)",
    "Guyanese",
    "Haitian",
    "Honduran",
    "Hungarian",
    "Ivorian",
    "Indian",
    "Indonesian",
    "Iraqi",
    "Iranian",
    "Irish",
    "Icelandic",
    "Israeli",
    "Italian",
    "Jamaican",
    "Japanese",
    "Jordanian",
    "Kazakh",
    "Kenyan",
    "Kyrgyz",
    "Saint Kitts and Nevis",
    "Kosovar",
    "Kuwaiti",
    "Laotian",
    "Basotho",
    "Latvian",
    "Liberian",
    "Lebanese",
    "Libyan",
    "Liechtensteiner",
    "Lithuanian",
    "Luxembourgish",
    "Macedonian",
    "Malagasy",
    "Malawian",
    "Malaysian",
    "Maldivian",
    "Malian",
    "Maltese",
    "Mauritian",
    "Mauritanian",
    "Mexican",
    "Micronesian",
    "Moldovan",
    "Monegasque",
    "Mongolian",
    "Mozambican",
    "Namibian",
    "Nauruan",
    "Nepalese",
    "Dutch",
    "New Zealander",
    "Nicaraguan",
    "Nigerien",
    "Nigerian",
    "North Korean",
    "Norwegian",
    "Omani",
    "Ugandan",
    "Uzbek",
    "Pan-African",
    "Papua New Guinean",
    "Paraguayan",
    "Peruvian",
    "Polish",
    "Puerto Rican",
    "Portuguese",
    "Qatari",
    "Romanian",
    "Rwandan",
    "Saint Lucian",
    "San Marino",
    "Samoan",
    "Senegalese",
    "Seychellois",
    "Sierra Leonean",
    "Singaporean",
    "Slovak",
    "Slovenian",
    "Somali",
    "Sudanese",
    "Sri Lankan",
    "South African",
    "South Korean",
    "Sudanese",
    "Syrian",
    "Tajik",
    "Tanzanian",
    "Thai",
    "Togolese",
    "Tongan",
    "Trinidadian and Tobagonian",
    "Tunisian",
    "Turkmen",
    "Turkish",
    "Tuvaluan",
    "Ukrainian",
    "Uruguayan",
    "Vanuatuan",
    "Venezuelan",
    "Vietnamese",
    "Yemeni",
    "Zambian",
    "Zimbabwean",
  ];
  return nationalityOptions;
}

List<String> getLanguages() {
  List<String> languagesSpoken = [
    "Afrikaans",
    "Albanian",
    "Amharic",
    "English",
    "Arabic",
    "Armenian",
    "Bengali",
    "Bosnian",
    "Bulgarian",
    "Catalan",
    "Chichewa",
    "Chinese (Mandarin)",
    "Croatian",
    "Dari",
    "Danish",
    "Dzongkha",
    "Spanish",
    "Estonian",
    "Ewe",
    "Filipino (Tagalog)",
    "Finnish",
    "French",
    "Georgian",
    "Greek",
    "Guarani",
    "Haitian Creole",
    "Hausa",
    "Hindi",
    "Hmong",
    "Hungarian",
    "Igbo",
    "Indonesian",
    "Irish",
    "Italian",
    "Japanese",
    "Javanese",
    "Kashmiri",
    "Kazakh",
    "Kinyarwanda",
    "Klingon",
    "Khmer",
    "Kurdish",
    "Kurdish (Kurmanji)",
    "Lao",
    "Latvian",
    "Lithuanian",
    "Malagasy",
    "Malay",
    "Maldivian (Dhivehi)",
    "Maltese",
    "Maori",
    "Marathi",
    "Mongolian",
    "Navajo",
    "Dutch",
    "Nepali",
    "Norwegian",
    "Uzbek",
    "Pashto",
    "Persian (Farsi)",
    "Polish",
    "Portuguese",
    "Quechua",
    "Romanian",
    "Russian",
    "Serbian",
    "Sesotho",
    "Sinhala",
    "Slovak",
    "Slovenian",
    "Somali",
    "Sudanese Arabic",
    "Swedish",
    "Swahili",
    "Tajik",
    "Tamil",
    "Tigrinya",
    "Tigre",
    "Tok Pisin",
    "Czech",
    "Thai",
    "Turkish",
    "Turkmen",
    "Ukrainian",
    "Urdu",
    "Vietnamese",
    "Walloon",
    "Wolof",
    "Yiddish",
    "Yoruba",
    "Zulu",
    "Zaza",
  ];
  return languagesSpoken;
}

List<String>? getReligions() {
  List<String> religions = [
    "Christianity",
    "Islam",
    "Hinduism",
    "Buddhism",
    "Sikhism",
    "Judaism",
    "Taoism",
    "Confucianism",
    "African Traditional Religions",
    "Native American Religions",
    "Shinto",
    "Zoroastrianism",
    "Aboriginal Religions",
    "Polynesian Traditional Religions",
    "Jainism",
    "Bahaism",
    "Deism",
    "Paganism",
    "Humanism",
    "Unitarianism",
    "Scientology",
    "Raelism",
    "Falun Gong",
    "Eckankar",
    "New Age",
    "Sufism",
  ];
  return religions;
}

List<String> getAges() {
  List<String> ages = [
    for (int i = 18; i <= 1000000; i++) i.toString(),
    "Other",
  ];

  return ages;
}

List<String> getClothingStyles() {
  List<String> clothingStyles = [
    "Classic",
    "Casual",
    "Chic",
    "Streetwear",
    "Boho (Bohemian)",
    "Vintage",
    "Punk",
    "Gothic",
    "Grunge",
    "Preppy",
    "Minimalist",
    "Haute couture",
    "Sportswear",
    "Jogging",
    "Fancy",
    "Military",
    "Androgynous",
    "Hippie",
    "Skater",
    "Workwear",
    "Glamorous",
    "Retro-futuristic",
    "Rock",
    "Kawaii (Japanese)",
    "Ethnic",
    "Western",
    "Sci-fi",
    "Mod",
    "Art Deco",
    "Techwear",
    "Cosplay",
    "Steampunk",
    "Everything",
    "Other",
    "Depends on the day",
  ];

  return clothingStyles;
}

List<String> getPersonalValues() {
  List<String> personalValues = [
    "Respect",
    "Love",
    "Honesty",
    "Responsibility",
    "Freedom",
    "Justice",
    "Solidarity",
    "Kindness",
    "Tolerance",
    "Courage",
    "Gratitude",
    "Equality",
    "Freedom of expression",
    "Compassion",
    "Altruism",
    "Fidelity",
    "Humility",
    "Patience",
    "Integrity",
    "Perseverance",
    "Loyalty",
    "Empathy",
    "Trust",
    "Creativity",
    "Autonomy",
    "Spirituality",
    "Modesty",
    "Harmony",
    "Brotherhood",
    "Discipline",
    "Listening",
    "Kindness",
    "Foresight",
    "Acceptance",
    "Social responsibility",
    "Respect for nature",
    "Family",
    "Fairness",
    "Forgiveness",
    "Education",
    "Sharing",
  ];

  return personalValues;
}

List<String> getActivitiesPromotions() {
  List<String> activities = [
    'Athletics',
    'Soccer',
    'Basketball',
    'Tennis',
    'Rugby',
    'Ice Hockey',
    'Handball',
    'Baseball',
    'Cricket',
    'Golf',
    'Boxing',
    'Swimming',
    'Cycling',
    'Martial Arts (Karate, Taekwondo, Judo, Kung-Fu, Etc.)',
    'Fencing',
    'Skiing (Alpine, Nordic, Freestyle)',
    'Surfing',
    'Motocross',
    'Formula 1 (F1)',
    'E-Sports (Competitive Video Games)',
    'Badminton',
    'Volleyball',
    'Table Tennis (Ping-Pong)',
    'American Football',
    'Wrestling',
    'Gymnastics',
    'Pole Vault',
    'Rugby Sevens',
    'Kitesurfing',
    'High Jump',
    'Diving',
    'Sailing',
    'Rowing',
    'Polo',
    'Squash',
    'Triathlon',
    'Skateboarding',
    'Parkour',
    'Muay Thai (Thai Boxing)',
    'Canoeing/Kayaking',
    'Sport Fishing',
    'Bobsled',
    'Curling',
    'Adaptive Sports (For People With Disabilities)',
    'Rafting',
    'Archery',
    'Lacrosse',
    'Billiards',
    'Karate',
    'Fishing',
    'Roller Sports (Roller Derby, Roller Hockey)',
    'Snowboarding',
    'Rock Climbing',
    'Bocce',
    'Disc Golf',
    'Bowling',
    'Field Hockey',
    'Ultimate Frisbee',
    'Professional Wrestling',
    'Motorsports (Karting, Motorcycle, Rally)',
    'Shooting Sports',
    'Snowkiting',
    'Ballet (Competitive Sport In Some Disciplines)',
    'Crossfit',
    'Water Polo',
    'Hunting (Sport)',
    'Pole Dance (Competitive)',
    'MMA (Mixed Martial Arts)',
    'Orienteering',
    'Beach Tennis',
    'Paddleboarding',
    'Krav Maga',
    'Shooting (Firearms)',
    'Airsoft',
    'Rugby Sevens',
    'Kickboxing',
    'Speed Skating',
    'BMX',
    'Mountain Biking (MTB)',
    'Trail Running',
    'Korfball',
    'Beach Volleyball',
    'BMX Freestyle',
    'Paintball',
    'Zumba',
    'Yoga (Sportive Approach)',
    'Shot Put',
    'Discus Throw',
    'Tug-Of-War',
    'Crocket',
    'Shopping',
    'Club',
    'Bar',
    'Restaurant',
    'Travel',
    'Chilling',
    'Stoner',
    'Garage Sale',
    'Protest',
    'Drag',
    'Outdoors',
    'Skydiving',
    'Movie Theater',
    'BBQ',
    'Park',
    'Walk',
    'Car Show',
    'Performance',
    'Opera',
    'Movie',
    'Watching A Game',
    'One-On-One',
    'One Night Premium',
    'Paintball',
    'Go-Karting',
    'Golf',
    'Arcade',
    'Helicopter Tour',
    'Boating',
    'Chalet',
    'Water Slides',
    'Beach',
    'Free',
    'Volunteering',
    'Road Trip',
    'Conference',
    'Music Video Shoot',
    'Work',
    'La Ronde',
    'Sugar Shack',
    'Project',
    'School',
    'Help',
    'Auto Show',
    'Biodome',
    'Spa',
    'Pool',
    'Rock Climbing',
    'Museum',
    'Insectarium',
    'Festival',
    'Carnival',
    'Workout',
    'Gamer',
    'Dancing',
    'Entertainment',
    'Fashion',
    'Gardening',
    'Cooking',
    'Netflix And Chill',
    'Swimming',
    'Tattoo',
    'Bowling',
    'Nature',
    'Fishing',
    'Motorcycle',
    'After Party',
    'Wedding',
    'Buffet',
    'Rafting',
    'Zoo',
    'Massage',
    'Christmas',
    'Valentine\'s Day',
    'Halloween',
    'Easter',
    'Religious Activity',
    'Saint-Jean',
    'National Holiday',
    'Library',
    'Hiking',
    'New Year\'s Day',
    'Mother\'s Day',
    'Father\'s Day',
    'Labor Day',
    'Party',
    'Gym',
    'Picnic',
    'Pool Party',
    'Skiing',
    'Snowboarding',
    'Winter Activities',
    'Hunting',
    'Competition',
    'Contribution',
    'Camping',
    'Jet Skiing',
    'Hot Air Ballooning',
    'Skydiving',
    'Out Of Town',
    'Tourism',
    'Auction',
    'Gym Partner',
    'Cultural Activities',
    '420',
    'Drive-In Movie',
    'Motocross',
    'Cycling',
    'Photography',
    'Casino',
    'Kayaking',
    'Phone Chat',
    'Yoga',
    'Kiosk',
    'Musician',
    'Circus',
    'Drag Show',
    'Study',
    'Library',
    'Biodome',
    'Sugar Shack',
    'Opera',
    'Camping',
    'Chalet',
    'Hunting And Fishing',
    'Health Walk',
    'Insectarium',
    'Theater',
    'Waterfront',
    'Pajama Party',
    'Masquerade Ball',
    'Wedding',
    'Baby Shower',
    'Pool Party',
    'Unlike Party',
    'Skate Park',
    'Adventure',
    'Ice Skating',
    'Inline Skating',
    'Bungee Jumping',
    'Kite Flying',
    'Arts',
    'Fashion Show',
    'Crazy Carpet',
    'Surprise Party',
    'New Year\'s',
    'Auction Sale',
    'Air Show',
    'Fireworks'
  ];

  return activities;
}

List<String> getMusicTypes() {
  List<String> musicTypes = [
    'Pop',
    'Rock',
    'Hip-hop / Rap',
    'R&B (Rhythm and Blues)',
    'Soul',
    'Disco',
    'Funk',
    'Punk',
    'Reggae',
    'Indie Rock',
    'K-pop',
    'Latin Pop',
    'Electro-pop',
    'Synthwave',
    'Eurodance',
    'Trap',
    'Drill',
    'Dancehall',
    'House',
    'Techno',
    'Dubstep',
    'Trance',
    'Future Bass',
    'Ambient Pop',
    'Folk',
    'Blues',
    'Gospel',
    'Country',
    'Bluegrass',
    'Celtic',
    'Flamenco',
    'Bossa Nova',
    'Tango',
    'Samba',
    'Chanson Française',
    'Fado',
    'Vallenato',
    'Polka',
    'Ranchera Music',
    'Haitian Kompa',
    'Balkans',
    'Qawwali',
    'Zydeco',
    'Western Classical Music',
    'Baroque',
    'Romantic Classical',
    'Modern Classical',
    'Opera',
    'Symphonic',
    'Chorale',
    'Chamber Music',
    'Minimalist Music',
    'Contemporary Music',
    'Atonal Music',
    'Experimental Music',
    'Jazz',
    'Bebop',
    'Cool Jazz',
    'Free Jazz',
    'Fusion',
    'Swing',
    'Smooth Jazz',
    'Latin Jazz',
    'Gypsy Jazz',
    'Big Band',
    'Afrobeat',
    'Highlife',
    'Soukouss',
    'Mbalax',
    'Gnawa',
    'Raï',
    'Choro',
    'Sufi Music',
    'Indian Classical Music',
    'Carnatic Music',
    'Bollywood Music',
    'Gqom',
    'Kwaito',
    'Taarab',
    'Bhangra',
    'Andean Music',
    'Cumbia',
    'Salsa',
    'Merengue',
    'Reggaeton',
    'Mambo',
    'Bossa Nova',
    'Cha-cha-cha',
    'Flamenco',
    'Tango',
    'Calypso',
    'Soca',
    'Tropicalia',
    'Jazz Manouche',
    'Gamelan',
    'J-pop',
    'K-pop',
    'Funk Carioca',
    'Afro-Cuban Jazz',
    'Tuvan Throat Singing',
    'Chamber Music',
    'Alternative Hip-hop',
    'Latin Trap',
    'Shoegaze',
    'Post-rock',
    'Lo-fi Hip-hop',
    'Death Metal',
    'Black Metal',
    'Doom Metal',
    'Power Metal',
    'Psytrance',
    'Hardstyle',
    'Eurovision Song Contest Music',
    'New Age',
    'Industrial Music',
    'Drum and Bass',
    'Ambient',
    'Post-punk',
    'Noise Music',
    'Worldbeat'
  ];
  return musicTypes;
}

List<String> getDanceTypes() {
  List<String> danceTypes = [
    'Ballet',
    'Contemporary Dance',
    'Classical Dance',
    'Jazz',
    'Hip-hop',
    'Breakdance (B-boying)',
    'Salsa',
    'Tango',
    'Flamenco',
    'Cha-cha-cha',
    'Rumba',
    'Samba',
    'Merengue',
    'Bossa Nova',
    'Cumbia',
    'Reggaeton',
    'Ballroom Dance',
    'Waltz',
    'Foxtrot',
    'Quickstep',
    'Paso Doble',
    'Mambo',
    'Lindy Hop',
    'Swing',
    'Zumba',
    'Kizomba',
    'Ballet Jazz',
    'Belly Dance',
    'African Dance',
    'Indian Dance (Bharatanatyam, Kathak, Odissi, etc.)',
    'Pointe (Ballet)',
    'Argentine Tango',
    'Traditional Flamenco',
    'Urban Dance',
    'Krumping',
    'Waacking',
    'Popping',
    'Locking',
    'Contact Improvisation',
    'Folk Dance',
    'Irish Dance',
    'Polish Dance',
    'Russian Ballet',
    'Charleston',
    'Soca Dance',
    'Hula',
    'Dancehall',
    'Gumboot Dance',
    'Cossack Dance',
    'Modern Ballet',
    'Korean Traditional Dance',
    'Morris Dance',
    'Oriental Dance',
    'Tinikling',
    'Vogueing',
    'Jitterbug',
    'Zouk',
    'Neo-classical Ballet',
    'Sufi Whirling (Sufi Dance)',
    'Ragtime Dance',
    'Clogging',
    'Pointework',
    'Contemporary Ballet',
    'Jazz Funk',
    'House Dance',
    'Shag Dance',
    'Fandango',
    'Cuban Salsa',
    'Tinikling',
    'Mazurka',
    'Cumbia Villera',
    'Pantomime',
    'Lambada',
    'Belly Dance Fusion',
    'Capoeira',
    'Samba de Gafieira',
    'Steppin\'',
    'Two-step',
    'B-boying (Breakdance)',
    'Montreal-style Salsa',
    'Afrobeat Dance',
    'Sirtaki (Greek Dance)',
    'Morris Dance',
    'Polka',
    'Korean Traditional Dance (Talchum, Buchaechum)',
    'Latin Dance',
    'Tejano Dance',
    'Dabka (Arabic Dance)',
    'Tahitian Dance',
    'Tango Nuevo',
    'Reggae Dancehall',
    'Pointe Ballet',
    'Zumba Fitness',
    'Step Dance',
    'Fosse-style Jazz',
    'Balboa',
    'Cuban Salsa',
    'Cajun Dance',
    'Dancehall Reggae',
    'Aerial Silks (Acrobatic Dance)',
    'Folk Dance',
    'Irish Céilí Dance',
    'Malaquita Dance',
    'Raqs Sharqi (Belly Dance)',
    'Sufi Dance',
    'Capoeira',
    'Queer Dance',
    'Butoh',
    'Ghawazi',
    'Tango Nuevo',
    'Freestyle Dance',
    'Lambada',
    'Stepping',
    'Jazzercise',
    'Indian Classical Dance',
    'Rumba Cubana',
    'Contemporary African Dance',
    'Zouk Love',
    'Shiva Dance (Indian Spiritual Dance)'
  ];
  return danceTypes;
}
